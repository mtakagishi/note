.. post:: 2025-06-04
   :author: mtakagishi
   :language: ja
   :category: AI活用
   :tags: ChatGPT, プロジェクト機能, Git, Python, ワークフロー

========================================================
ChatGPT「プロジェクト」機能の実践ノート
========================================================

このページでは、 **ChatGPT-4o / o3 系の「プロジェクト」機能** を
Python 開発を中心とした問題解決ワークフローに組み込む方法を整理します。
機能の概要からモデル選定、巨大リポジトリの取り扱い、限界と対策まで
自分用メモ＋ブログ記事を兼ねた備忘録です。

.. contents::
   :local:
   :depth: 2

プロジェクト機能とは
====================

* **チャット履歴・ファイル・カスタム指示** を 1 テーマに束ねる“作業部屋”
* 同一プロジェクト内なら **アップロード済み資料** をすべてのチャットで共有
* Plus／Teams 以上の有料プランで利用可（2025-06-04 時点）

活用シナリオ
------------

* **研究メモ** – 論文 PDF ＋コードスニペットを放り込み、毎週 Q&A
* **リポジトリ改善** – Git diff を貼ってリファクタ方針を議論
* **イベント企画** – スプレッドシートと議事録を 1 か所に集約

モデル選定ガイド
================

.. list-table:: モデル比較
   :header-rows: 1
   :widths: 15 35 35

   * - モデル
     - 強み
     - 想定タスク
   * - GPT-4o
     - 速い・安い・画像/音声も可
     - 仕様書 PDF＋設計図レビュー
   * - o3
     - 推論精度トップクラス
     - 難解バグ解析、数理最適化
   * - o3-mini / o4-mini
     - 軽量・高速
     - 定型生成、CI 用スクリプト

**実運用サンプル**

1. 初期調査 →  **GPT-4o**
2. 詰まったら →  **o3** にスイッチ
3. YAML 量産など小物 →  **mini 系**

巨大プロジェクトの“最新ソース”同期術
===============================================

ChatGPT が参照できる情報源は **(1) チャット履歴** ・ **(2) アップロードファイル** ・
**(3) 明示的に読み込ませた URL** の三つだけ。
規模が膨らむほど **“与え方”** が重要になります。

同期パターン
------------

* **フル ZIP 定期アップロード** – 週 1 で ``git archive`` 出力を丸ごと
* **インクリメンタル diff** – PR ごとに ``git diff main..HEAD`` を貼付
* **要約ドキュメント** – 主要モジュールの責務を Markdown 1 枚に凝縮
* **自動生成メタ資料** – 依存グラフや ERD を SVG で添付

おすすめ運用フロー
------------------

.. list-table:: 運用テンプレ
   :header-rows: 1
   :widths: 15 45 40

   * - タイミング
     - アクション
     - 目的
   * - PR マージ時
     - diff を ChatGPT に要約させて *summary.md* 追記
     - “脳内 Wiki” を更新
   * - 週次
     - ``main`` を ZIP で再同期
     - 漏れ取り・キャッシュ更新
   * - 新チャット開始時
     - *summary.md* ＋直近 diff をまず添付
     - 新コンテキストの初期化
   * - 機能完了時
     - 「設計図を PlantUML で」など図を再生成
     - 可視化ドキュメント整備

**把握度テスト用プロンプト例**

::

   あなたが現在把握しているフォルダ構造と各モジュールの責務を
   300 words 以内で要約して下さい。

返答が古ければ、その時点で追加ファイルを再投入。

限界と注意点
============

* **トークン上限** – 128 k を超えると古い履歴から自然に落ちる
  → 要約レイヤーで情報を圧縮
* **GitHub deep research は Read-Only** – 自動で追従しない
  → 変更後は再 fetch を促す
* **セキュリティ** – 秘匿コードはモック化、API キーは必ず Secret 管理
* **最終責任は人間** – コミット・マージは必ず手元で CI／レビュー

まとめ
======

1. **プロジェクト = “AI 用ワークスペース”** 。資料と指示を整理すると再利用効率が跳ね上がる。
2. **モデルは GPT-4o を基軸に o3 を切り札として併用** 。
3. **同期はフル ZIP＋diff＋要約のカスケード** でスケール。
4. **理解度チェック用プロンプトを常備** し、ギャップが出たら即アップデート。

これで **「どこまで AI が把握しているか」** を見える化しながら
大規模コードベースでも安全に ChatGPT を戦力化できます。

.. rubric:: 記事情報

:著者: mtakagishi
:公開日: 2025-06-04
