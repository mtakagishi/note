********************************
Pipeline連携
********************************
Last Updated on 2021-04-17

コンセプト・用語
==============================
https://rancher.com/docs/rancher/v2.x/en/pipelines/concepts/

パイプライン
-------------------------------------
* パイプラインとは、ソフトウェアのデリバリプロセス。
* デリバリに必要なステップ、開発・本番などのステージングによる違いをコントロールする。
* Rancherはプロジェクトごとにパイプラインを構成できる。
* Pipeline as　codeに準拠 [#Pipeline]_
* .rancher-pipeline.yml または .rancher-pipeline.yaml

各ステージ
-------------------------------------
* 各ステージは複数のステップで構成
* ステージはPipelineで定義された順序で実行
* ステージ内のステップは同時実行される。
* 前のステージのコンプリートにより次のステージに進む
* 一般的に3ステージ

  * Build:

    コードのリポジトリへのチェックインの都度、パイプラインは自動的にレポジトリーのクローンとビルドを行う。通常はこのプロセスの段階で自動テストによって品質がレビューされる。

  * Publish:

    Buildステージの完了後のステージ。Dockerイメージの作成、レジストリへ公開またはカタログ登録する。

  * Deploy:

    Publishステージ完了後、新バージョンのコンテナイメージまたはカタログを元に、Product環境で使用できるようにする。

各ステップ
-------------------------------------
* pipelineステップは、指定したステージ内で実行される
* 各ステップの正常リターンは0であり、0以外のコードは失敗
* 失敗コードで終了するとパイプライン全体は失敗となる

ワークスペース
-------------------------------------
* ワークスペースは共有スペース
* ソースのチェックアウト場所であり、ビルドコマンドの実行場所となる。
* ワークスペース内で実行されたステップが、次のステップで利用されていく。
* ワークスペースは一時領域。パイプライン完遂後はexecutorによりクリーンアップされる。


rancher-pipeline.yamlの例
================================
https://rancher.com/docs/rancher/v2.x/en/pipelines/example/

バージョン管理プロバイダ連携
==============================
* github,gitlabなどとのpipeline連携の設定手順
* https://rancher.com/docs/rancher/v2.x/en/pipelines/#1-configure-version-control-providers

.. |date| date::

.. [#Pipeline] https://www.jenkins.io/doc/book/pipeline-as-code/

